""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          Section: Plugins {{{                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use Vim-Plug for plugin management
" https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')

"""""""""""""""""
"  General {{{  "
"""""""""""""""""
" Sensible Vim Defaults
" http://github.com/tpope/vim-sensible
Plug 'tpope/vim-sensible'

" Repeat plugin commands with "."
" http://github.com/tpope/vim-repeat
Plug 'tpope/vim-repeat'

" Common paired mappings
" https://github.com/tpope/vim-unimpaired
Plug 'tpope/vim-unimpaired'

" Commenting shortcuts
" https://github.com/tpope/vim-commentary
Plug 'tpope/vim-commentary'

" Affect surrounding characters
" https://github.com/tpope/vim-surround
Plug 'tpope/vim-surround'

" Text replacement inflection helpers
" https://github.com/tpope/vim-abolish
Plug 'tpope/vim-abolish'

" User defined text objects
" https://github.com/kana/vim-textobj-user
Plug 'kana/vim-textobj-user'

" Add text object for the entire document
" https://github.com/kana/vim-textobj-entire
Plug 'kana/vim-textobj-entire'

" Quickfix bar tools
" https://github.com/romainl/vim-qf
Plug 'romainl/vim-qf'
"""""""""""""""""
"  }}} General  "
"""""""""""""""""

"""""""""""""
"  Git {{{  "
"""""""""""""
" General Git functionality
" http://github.com/tpope/vim-fugitive
Plug 'tpope/vim-fugitive'

" Github functionality
" https://github.com/tpope/vim-rhubarb
Plug 'tpope/vim-rhubarb'

" Gist functionality
" https://github.com/mattn/gist-vim
Plug 'mattn/gist-vim'

" Show Git flags in buffer gutter
" https://github.com/airblade/vim-gitgutter
Plug 'airblade/vim-gitgutter'

" Show Git blame info in status bar
" https://github.com/zivyangll/git-blame.vim
Plug 'zivyangll/git-blame.vim'
"""""""""""""
"  }}} Git  "
"""""""""""""

"""""""""""""""""""""""
"  Shell support {{{  "
"""""""""""""""""""""""
" UNIX commands from vim
" https://github.com/tpope/vim-eunuch
Plug 'tpope/vim-eunuch'
"""""""""""""""""""""""
"  }}} Shell support  "
"""""""""""""""""""""""

""""""""""""""
"  Tags {{{  "
""""""""""""""
" Tag updater
" http://github.com/ludovicchabant/vim-gutentags
" Plug 'ludovicchabant/vim-gutentags'

" Tag browser
" https://github.com/majutsushi/tagbar
" Plug 'majutsushi/tagbar'
""""""""""""""
"  }}} Tags  "
""""""""""""""

""""""""""""""
"  Tmux {{{  "
""""""""""""""
" Tmux Command Runner
" https://github.com/christoomey/vim-tmux-runner
Plug 'christoomey/vim-tmux-runner'
""""""""""""""
"  }}} Tmux  "
""""""""""""""

""""""""""""""""""""""
"  Autocomplete {{{  "
""""""""""""""""""""""
" Completion handling
" https://github.com/Shougo/deoplete.nvim
" Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }

" Vim source for deoplete
" https://github.com/Shougo/neco-vim
" Plug 'Shougo/neco-vim'

" ZSH source for deoplete
" https://github.com/zchee/deoplete-zsh
" Plug 'zchee/deoplete-zsh'

" CoC Completion
" https://github.com/neoclide/coc.nvim
Plug 'neoclide/coc.nvim', {'branch': 'release'}
""""""""""""""""""""""
"  }}} Autocomplete  "
""""""""""""""""""""""

""""""""""""""""""
"  Snippets {{{  "
""""""""""""""""""
" Snippet Management
" https://github.com/SirVer/ultisnips
" Plug 'SirVer/ultisnips'

" Snippets
" https://github.com/honza/vim-snippets
" Plug 'honza/vim-snippets'
""""""""""""""""""
"  }}} Snippets  "
""""""""""""""""""

""""""""""""""""""""""
"  Edit helpers {{{  "
""""""""""""""""""""""
" Sort Motion - General sorting helpers
" https://github.com/christoomey/vim-sort-motion
Plug 'christoomey/vim-sort-motion'

" Alignment tools
" https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Table helpers
" https://github.com/godlygeek/tabular
Plug 'godlygeek/tabular'

" Emoji helpers
" https://github.com/junegunn/vim-emoji
Plug 'junegunn/vim-emoji'
""""""""""""""""""""""
"  }}} Edit helpers  "
""""""""""""""""""""""

""""""""""""""""""""
"  Navigation {{{  "
""""""""""""""""""""
" ACK
" https://github.com/mileszs/ack.vim
Plug 'mileszs/ack.vim'

" NERDTree File explorer
" https://github.com/scrooloose/nerdtree
Plug 'scrooloose/nerdtree'

" Add git flags to NERDTree
" https://github.com/Xuyuanp/nerdtree-git-plugin
Plug 'Xuyuanp/nerdtree-git-plugin'

" Fuzzy File Finder
" https://github.com/junegunn/fzf
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
" https://github.com/junegunn/fzf.vim
Plug 'junegunn/fzf.vim'
""""""""""""""""""""
"  }}} Navigation  "
""""""""""""""""""""

"""""""""""""""""
"  Display {{{  "
"""""""""""""""""
" Icons
" https://github.com/ryanoasis/vim-devicons
Plug 'ryanoasis/vim-devicons'

" https://github.com/tiagofumo/vim-nerdtree-syntax-highlight
Plug 'vwxyutarooo/nerdtree-devicons-syntax'

" Statusbar
" https://github.com/itchyny/lightline.vim
Plug 'itchyny/lightline.vim'

" Ale status in lightline
" https://github.com/maximbaz/lightline-ale
Plug 'maximbaz/lightline-ale'

" Show indentation indicator
" https://github.com/Yggdroot/indentLine
Plug 'Yggdroot/indentLine'
"""""""""""""""""
"  }}} Display  "
"""""""""""""""""

"""""""""""""""""
"  Linting {{{  "
"""""""""""""""""
" Asynchronous linting engine
" https://github.com/w0rp/ale
Plug 'w0rp/ale'

"""""""""""""""""
"  }}} Linting  "
"""""""""""""""""

""""""""""""""""""""""
"  CoffeeScript {{{  "
""""""""""""""""""""""
" CoffeeScript syntax definition
" https://github.com/kchmck/vim-coffee-script
Plug 'kchmck/vim-coffee-script'
""""""""""""""""""""""
"  }}} CoffeeScript  "
""""""""""""""""""""""

"""""""""""""
"  Eco {{{  "
"""""""""""""
" Eco template syntax definiton
" https://github.com/AndrewRadev/vim-eco
Plug 'AndrewRadev/vim-eco'
"""""""""""""
"  }}} Eco  "
"""""""""""""

"""""""""""""
"  Lua {{{  "
"""""""""""""
" Eco template syntax definiton
" https://github.com/tbastos/vim-lua
Plug 'tbastos/vim-lua'
"""""""""""""
"  }}} Lua  "
"""""""""""""

"""""""""""""""""""""""""
"  Javascript/JSON {{{  "
"""""""""""""""""""""""""
" Javascript syntax definition and indentation
" https://github.com/pangloss/vim-javascript
Plug 'pangloss/vim-javascript'


Plug 'prettier/vim-prettier', {
  \ 'do': 'yarn install --frozen-lockfile --production',
  \ 'for': ['javascript', 'typescript', 'css', 'less', 'scss', 'json', 'graphql', 'markdown', 'vue', 'svelte', 'yaml', 'html'] }

" Automatically close XML tags
" https://github.com/alvan/vim-closetag
" Plug 'alvan/vim-closetag'

" JSON text object and formatting
" https://github.com/tpope/vim-jdaddy
Plug 'tpope/vim-jdaddy'

" https://github.com/maksimr/vim-jsbeautify
" Plug 'maksimr/vim-jsbeautify'

" Vue support
" https://github.com/posva/vim-vue
Plug 'posva/vim-vue'
"""""""""""""""""""""""""
"  }}} Javascript/JSON  "
"""""""""""""""""""""""""

""""""""""""""""""
"  Markdown {{{  "
""""""""""""""""""
" Markdown support
" https://github.com/gabrielelana/vim-markdown
Plug 'gabrielelana/vim-markdown'
""""""""""""""""""
"  }}} Markdown  "
""""""""""""""""""

""""""""""""""
"  Ruby {{{  "
""""""""""""""
" Overall ruby support
" https://github.com/vim-ruby/vim-ruby
Plug 'vim-ruby/vim-ruby'

" Overall rails support
" https://github.com/tpope/vim-rails
Plug 'tpope/vim-rails'

" Allow vim-ruby to view gem sources
" https://github.com/tpope/vim-rbenv
Plug 'tpope/vim-rbenv'

" Add automatic `end` tags in ruby
" https://github.com/tpope/vim-endwise
Plug 'tpope/vim-endwise'

" Convert between inline and multi-line blocks
" https://github.com/jgdavey/vim-blockle
Plug 'jgdavey/vim-blockle'

" Plug 'hwartig/vim-seeing-is-believing'
""""""""""""""
"  }}} Ruby  "
""""""""""""""

""""""""""""""
"  Slim {{{  "
""""""""""""""
" Slim syntax definition
" https://github.com/onemanstartup/vim-slim
Plug 'onemanstartup/vim-slim'
""""""""""""""
"  }}} Slim  "
""""""""""""""

""""""""""""
"  C# {{{  "
""""""""""""
" C# Syntax
" https://github.com/OmniSharp/omnisharp-vim
Plug 'OmniSharp/omnisharp-vim'
""""""""""""""
"  }}} Slim  "
""""""""""""""

""""""""""""""""""
"  PlantUML {{{  "
""""""""""""""""""
" PlantUML syntax definition
" https://github.com/aklt/plantuml-syntax
Plug 'aklt/plantuml-syntax'

Plug 'weirongxu/plantuml-previewer.vim'
""""""""""""""""""
"  }}} PlantUML  "
""""""""""""""""""

""""""""""""""""""""""
"  Open Browser {{{  "
""""""""""""""""""""""
" Simple file server
" https://github.com/tamago324/vim-browsersync
Plug 'tamago324/vim-browsersync'

" OpenBrowser opens browsers
" https://github.com/tyru/open-browser.vim
Plug 'tyru/open-browser.vim'
""""""""""""""""""""""
"  }}} Open Browser  "
""""""""""""""""""""""

""""""""""""""""""""""
"  Colorschemes {{{  "
""""""""""""""""""""""
" Hybrid colorscheme
" https://github.com/w0ng/vim-hybrid
Plug 'w0ng/vim-hybrid'

" Hybrid colorscheme with red and purple swapped
" https://github.com/kristijanhusak/vim-hybrid-material
Plug 'kristijanhusak/vim-hybrid-material'

" Vividchalk colorscheme
" https://github.com/tpope/vim-vividchalk
Plug 'tpope/vim-vividchalk'

" Hybrid colorscheme for lightline
" https://github.com/cocopon/lightline-hybrid.vim
Plug 'cocopon/lightline-hybrid.vim'
""""""""""""""""""""""
"  }}} Colorschemes  "
""""""""""""""""""""""

call plug#end()


" Load sensible.vim now to allow for overrides
runtime! plugin/sensible.vim

" Prevent deoplete from running all the time
" call deoplete#custom#option('auto_complete_delay', 500)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                          }}} Section: Plugins                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Linting on all changes felt too aggressive. The below settings calls lint on
" certain events, either when I stop interacting or when entering / leaving
" insert mode
augroup TriggerAleLinting
  autocmd CursorHold * call ale#Queue(0, 'lint_file')
  autocmd CursorHoldI * call ale#Queue(0, 'lint_file')
  autocmd InsertLeave * call ale#Queue(0, 'lint_file')
  autocmd TextChanged * call ale#Queue(0, 'lint_file')
augroup END

" If the location list is open when the buffer is close, close it as well
augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

augroup PythonCodeStuffs
  autocmd!
  autocmd Filetype python nnoremap <buffer> <leader>rp :w<cr>:VtrSendCommandToRunner python3 <c-r>=expand("%")<cr><cr><cr>
  autocmd Filetype python nnoremap <buffer> <leader>rpk :w<cr>:VtrSendCommandToRunner python3 contemplate_koans.py<cr><cr>
augroup END

" prevent constant linting
let g:ale_lint_delay = 1000
let g:ale_lint_on_save = 1
let g:ale_lint_on_enter = 0
let g:ale_lint_on_text_changed = 0

" don't show location list with errors
let g:ale_open_list = 0

" don't highlight warnings, but still show status column
let g:ale_set_highlights = 0

" fix whitespace in all files
let g:ale_fix_on_save = 0
let g:ale_fixers = {
      \   '*': ['remove_trailing_lines', 'trim_whitespace']
      \ }

let g:ale_warn_about_trailing_whitespace = 1
let g:ale_warn_about_trailing_blank_lines = 1

""""""""""""""""""""""""""""
"  Colorscheme Config {{{  "
""""""""""""""""""""""""""""
" Set color of folder icons to match directory color
highlight! link NERDTreeFlags NERDTreeDir

let g:hybrid_custom_term_colors = 1
let g:hybrid_reduced_contrast = 1 " Remove this line if using the default palette.
set background=dark
colorscheme hybrid

let g:ale_sign_column_always = 1
let g:ale_sign_error = emoji#for('no_entry_sign', ' ', 2)
let g:ale_sign_warning = emoji#for('warning', ' ', 2)
let g:ale_sign_info = emoji#for('information_source', ' ', 2)
let g:ale_sign_style_error = emoji#for('face_with_open_mouth_vomiting', ' ', 2)
let g:ale_sign_style_warning = emoji#for('nauseated_face', ' ', 2)
""""""""""""""""""""""""""""
"  }}} Colorscheme Config  "
""""""""""""""""""""""""""""

" Trigger configuration
let g:UltiSnipsExpandTrigger='<tab>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'

" Edit configuration
let g:UltiSnipsEditSplit='vertical'

" Directory configuration
let g:UltiSnipsSnippetStorageDirectoryForUltiSnipsEdit='~/dotfiles/vim/.vim/UltiSnips'
" let g:UltiSnipsSnippetDirectories=['UltiSnips', '~/dotfiles/vim/.vim/UltiSnips']
let g:UltiSnipsSnippetDirectories=['~/dotfiles/vim/.vim/UltiSnips']

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         Section: Commands {{{                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Rebind often fatfingered commands
command! WQ wq
command! Wq wq
command! W w
command! Q q

" Sudo save trick (save a file as sudo when it wasn't opened as such)
cmap w!! w !sudo tee > /dev/null %

" :Silent - Run a shell command silently
command! -nargs=1 Silent execute ':silent !'.<q-args>.' > /dev/null &' | execute ':redraw!'

" :Pbin - Post to pastebin
command! -range=% Pbin silent execute <line1> . "," . <line2> . "w !pastebinit | tr -d '\\n' | pbcopy"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         }}} Section: Commands                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         Section: Mappings {{{                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use space as the local leader key
let mapleader=' '

" Use double backslash as the local leader key for filetype specific actions
let maplocalleader = '\\'

" Fold handling
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" Disable macro recording to comma, as it is often fat-fingered
nnoremap q: :q

" Rebind Y to match other operators
nnoremap Y y$

" CtrlP via FZF
nnoremap <silent> <c-p> :Buffers<cr>
nnoremap <silent> <c-t> :Tags<cr>
nnoremap <silent> <c-y> :History<cr>

""""""""""""""""""""""""""""""""
"  Global leader mappings {{{  "
""""""""""""""""""""""""""""""""
" Quick quit
noremap <leader>q :q<cr>
noremap <leader>Q :q!<cr>

" Quick save
noremap <leader>w :w<cr>
noremap <leader>W :w!<cr>

" Quick save and quit
noremap <leader>x :x<cr>
noremap <leader>X :x!<cr>

""""""""""""""""""""""""""""""""
"  }}} Global leader mappings  "
""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""
"  NORMAL mode leader mappings {{{  "
"""""""""""""""""""""""""""""""""""""
nnoremap <silent> <leader><space> :Files<cr>

" Prepare Ack command
nnoremap <leader>a :Ack!<space>

" Open FZF
nnoremap <silent> <leader>bf :Buffers<cr>
nnoremap <silent> <leader>bt :BTags<cr>
nnoremap <silent> <leader>bl :BLines<cr>
nnoremap <silent> <leader>bc :BCommits<cr>

" Copy filename to clipboard
nnoremap <silent> <leader>cf :!echo % \| xcopy<cr><cr>

" Copy filename:lineno to clipboard
nnoremap <silent> <leader>cl :!echo %:<c-r>=line('.')<cr> \| xcopy<cr><cr>

" Location list open/close
nnoremap <silent> <leader>co :copen<cr>
nnoremap <silent> <leader>cc :cclose<cr>

" Duplicate paragraph
nnoremap <leader>cp yap<S-}>p

" Delete to system clipboard
nnoremap <leader>d "+d
nnoremap <leader>D "+D

" Run specs
nnoremap <leader>drf :w<cr>:VtrSendCommandToRunner bundle exec rspec -f documentation <c-r>=expand("%")<cr><cr>
nnoremap <leader>drl :w<cr>:VtrSendCommandToRunner bundle exec rspec -f documentation <c-r>=expand("%")<cr>:<c-r>=line('.')<cr><cr>
nnoremap <leader>drt :w<cr>:VtrSendCommandToRunner bundle exec rake test TEST=<c-r>=expand("%")<cr><cr>

" Convert emojis
nnoremap <leader>em :%s/:\([a-z_]\+\):/\=emoji#for(submatch(1), submatch(0))/g<cr>

" Show Fuzzy Find
nnoremap <silent><leader>f :Files<cr>

" Show Fuzzy find on git modified files only
nnoremap <silent> <leader>gf :FzfGit<cr>
nnoremap <silent> <leader>gc :Commits<cr>
nnoremap <leader>gb :<c-u>call gitblame#echo()<cr>

" Show MRU Files
nnoremap <silent> <leader>h :History<cr>

" Beautify JS
nnoremap <silent> <leader>j :call JsBeautify()<cr>
" Ale fix
nnoremap <leader>lf :ALEFix<cr>

" Location list open/close
nnoremap <leader>lo :lopen<cr>
nnoremap <leader>lc :lclose<cr>

" Show NERDTree
nnoremap <leader>nt :NERDTreeToggle<CR>
nnoremap <leader>nf :NERDTreeFind<CR>

" Easier newline insertion
nnoremap <leader>o o<esc>k
nnoremap <leader>O O<esc>j

" Paste from system clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P

" Run specs
nnoremap <leader>rf :w<cr>:VtrSendCommandToRunner dox-do bundle exec rspec -f documentation <c-r>=expand("%")<cr><cr>
nnoremap <leader>rl :w<cr>:VtrSendCommandToRunner dox-do bundle exec rspec -f documentation <c-r>=expand("%")<cr>:<c-r>=line('.')<cr><cr>
nnoremap <leader>rt :w<cr>:VtrSendCommandToRunner dox-do bundle exec rake test TEST=<c-r>=expand("%")<cr><cr>

" Run rubocop
nnoremap <leader>rc :w<cr>:VtrSendCommandToRunner dox-do rubocop --config .rubocop.ci.yml --display-cop-names --extra-details --display-style-guide --force-exclusion $(git diff --name-only --diff-filter=AM origin/master..HEAD -- "*.rb" "*.rake" "*.jbuilder")<cr>

" Run ruby file
nnoremap <leader>rb :w<cr>:VtrSendCommandToRunner ruby <c-r>=expand("%")<cr><cr>
nnoremap <leader>r! :w<cr>:VtrSendCommandToRunner !!!<cr>

" Insert rails frozen string directive
nnoremap <leader>rz ggO<cr><up># frozen_string_literal: true<esc><c-o>

" Open UltiSnipsEdit
" nnoremap <leader>s :UltiSnipsEdit<cr>

" Show tagbar
" nnoremap <leader>tt :TagbarToggle<cr>
" nnoremap <leader>to :TagbarOpenAutoClose<cr>
" nnoremap <leader>tf :TagbarOpen fj<cr>
" nmap <leader>tn :TagbarOpen fj<cr><down><cr>
" nmap <leader>tp :TagbarOpen fj<cr><up><cr>

" Edit vimrc
nnoremap <leader>ve :vsp $MYVIMRC<cr>

" Vim plugin handling
nnoremap <leader>vpi :PlugInstall<cr>
nnoremap <leader>vpu :PlugUpgrade<cr>:PlugUpdate<cr>
nnoremap <leader>vpc :PlugClean!<cr>:q<cr>

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Source vimrc
nnoremap <leader>vs :source $MYVIMRC<cr>

" Yank to system clipboard
nnoremap <leader>y "+y
nnoremap <leader>Y "+Y

" Cleanup and retab document
nnoremap <silent> <leader>z =ae:set et<cr>:retab<cr>:ALEFix<cr>

" Format entire document
nnoremap <leader>= =ae

" Horizontal split
nnoremap <leader>- :split<cr><c-w>j
nnoremap <leader>_ :split<cr><c-w>j

" Vertical split
nnoremap <leader>\| :vsplit<cr><c-w>l
nnoremap <leader>\ :vsplit<cr><c-w>l

" Quick pane navigation
nnoremap <leader><left> <c-w><left>
nnoremap <leader><right> <c-w><right>
nnoremap <leader><up> <c-w><up>
nnoremap <leader><down> <c-w><down>
"""""""""""""""""""""""""""""""""""""
"  }}} NORMAL mode leader mappings  "
"""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""
"  VISUAL mode leader mappings {{{  "
"""""""""""""""""""""""""""""""""""""
" Delete to system clipboard
vnoremap <leader>d "+d

" Convert emojis
vnoremap <leader>em :s/:\([a-z_]\+\):/\=emoji#for(submatch(1), submatch(0))/g<cr>

vnoremap <leader>mb :s/\%V\(.*\)\%V/**\1**/g
vmap <leader>mi S_

" Paste from system clipboard
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" Yank to system clipboard
vnoremap <leader>y "+y
"""""""""""""""""""""""""""""""""""""
"  }}} VISUAL mode leader mappings  "
"""""""""""""""""""""""""""""""""""""
" inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<CR>"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                         }}} Section: Mappings                          "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       Section: Vim Settings {{{                        "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
filetype plugin indent on
set expandtab
set foldenable
set foldmethod=marker
set hlsearch
set list
set listchars=tab:\ ,trail:␠,extends:>,precedes:<
set norelativenumber
set noshowmode
set nowrap
set number
set signcolumn=yes
set shiftwidth=2
set softtabstop=2
set tabstop=2
set mouse=a
set wildignore+=*/.git/*,*/tags,*/vendor/*
set termguicolors

set updatetime=300
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Make spaces and tabs red
hi SpecialKey ctermfg=red guifg=red

" highlight lines over 80 chars
if exists('+colorcolumn')
  set colorcolumn=80
else
  augroup HighlightLongLines
    autocmd BufWinEnter * let w:m2=matchadd('ErrorMsg', '\%>80v.\+', -1)
  augroup END
endif

" Move swap files to a single directory
set directory=$HOME/.vim/swapfiles//
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                       }}} Section: Vim Settings                        "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                     Section: Lightline Config {{{                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General lightline settings
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ], [ 'readonly', 'filename' ], [ 'fugitive' ] ],
      \   'right': [ [ 'lineinfo' ], [ 'percent' ], [ 'fileformat', 'fileencoding', 'filetype' ], [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
      \ },
      \ 'colorscheme': 'hybrid',
      \ 'component_function': {
      \   'fugitive': 'LightlineFugitive',
      \   'filename': 'LightlineFilename',
      \   'fileformat': 'LightlineFileformat',
      \   'filetype': 'LightlineFiletype',
      \   'fileencoding': 'LightlineFileencoding',
      \   'mode': 'LightlineMode',
      \   'readonly': 'LightLineReadonly',
      \ },
      \ 'component_expand': {
      \   'linter_checking': 'lightline#ale#checking',
      \   'linter_warnings': 'lightline#ale#warnings',
      \   'linter_errors': 'lightline#ale#errors',
      \   'linter_ok': 'lightline#ale#ok',
      \ },
      \ 'component_type': {
      \   'linter_checking': 'left',
      \   'linter_warnings': 'warning',
      \   'linter_errors': 'error',
      \   'linter_ok': 'left',
      \ },
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ }
" Git Status (don't show for Tagbar or NERDTree)
function! LightlineFugitive()
  try
    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && exists('*fugitive#head')
      let mark = ''
      let branch = fugitive#head()
      return branch !=# '' ? mark.branch : ''
    endif
  catch
  endtry
  return ''
endfunction

function! LightlineFilename()
  let dir = substitute(getcwd(), '^.*/', '', '')
  let filename = expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
  let modified = &modified ? ' +' : ''
  let fullname = dir . '/' . filename . modified
  return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
        \ &filetype ==# 'unite' ? unite#get_status_string() :
        \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
        \ filename ==# '[No Name]' ? filename : fullname
endfunction

" File is readonly
function! LightlineReadonly()
  return &filetype !~? 'help' && &readonly ? '' : ''
endfunction

" File has changes that are not saved
function! LightlineModified()
  return &filetype =~# 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

" File format and icon
function! LightlineFileformat()
  return winwidth(0) > 70 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

" Filetype as known to Vim
function! LightlineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

" File encoding
function! LightlineFileencoding()
  return winwidth(0) > 70 ? (&fileencoding !=# '' ? &fileencoding : &encoding) : ''
endfunction

" Mode string, usually NORMAL, INSERT, VISUAL, but sometimes tied to plugin
function! LightlineMode()
  return expand('%:t') ==# '__Tagbar__' ? 'Tagbar':
      \ expand('%:t') ==# 'ControlP' ? 'CtrlP' :
      \ &filetype ==# 'unite' ? 'Unite' :
      \ &filetype ==# 'vimfiler' ? 'VimFiler' :
      \ &filetype ==# 'vimshell' ? 'VimShell' :
      \ lightline#mode()
endfunction

let g:lightline#ale#indicator_checking = ' '
let g:lightline#ale#indicator_warnings = ' '
let g:lightline#ale#indicator_errors = ' '
let g:lightline#ale#indicator_ok = ' '
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                     }}} Section: Lightline Config                      "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" call deoplete#custom#source('emoji', 'filetypes', ['gitcommit', 'markdown', 'vim', 'sh', 'bash', 'zsh'])

" Run at startup
" let g:deoplete#enable_at_startup = 1
" let g:deoplete#disable_auto_complete = 1

let NERDTreeNaturalSort = 1
" NERDTree DevIcon Settings
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:WebDevIconsNerdTreeAfterGlyphPadding = ' '
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:DevIconsEnableFoldersOpenClose = 1
let g:WebDevIconsUnicodeDecorateFolderNodesDefaultSymbol=''
let g:DevIconsDefaultFolderOpenSymbol=''
let g:NERDTreeDirArrowExpandable = ' '
let g:NERDTreeDirArrowCollapsible = ' '
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ 'Modified'  : '',
    \ 'Staged'    : '',
    \ 'Untracked' : '',
    \ 'Renamed'   : '',
    \ 'Unmerged'  : '',
    \ 'Deleted'   : '',
    \ 'Dirty'     : '',
    \ 'Clean'     : '',
    \ 'Ignored'   : '',
    \ 'Unknown'   : ''
    \ }


set runtimepath+=/usr/local/opt/fzf

let g:fzf_files_options =
      \ '--reverse ' .
      \ '--preview "(coderay {} || cat {}) 2> /dev/null | head -'.&lines.'"'
let g:fzf_colors =
    \ { 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }
" :FzfGit - Show FZF for files modified in git
command! FzfGit call fzf#run(fzf#wrap({'source': 'git ls-files --exclude-standard --others --modified'}))
let g:indentLine_char = '║'

" let $FZF_DEFAULT_COMMAND='find . \( -name doc -o -name vendor \) -prune -o -print'

" Enable seeing-is-believing mappings only for Ruby
augroup seeingIsBelievingSettings
  autocmd!

  autocmd FileType ruby nmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby xmap <buffer> <F4> <Plug>(seeing-is-believing-mark)
  autocmd FileType ruby imap <buffer> <F4> <Plug>(seeing-is-believing-mark)

  autocmd FileType ruby nmap <buffer> <F5> <Plug>(seeing-is-believing-run)
  autocmd FileType ruby imap <buffer> <F5> <Plug>(seeing-is-believing-run)
augroup END

" nnoremap <leader>`i :w<cr>:VtrA 2<cr>:VtrSendCommandToRunner RACK_ENV=test bundle exec lita<cr>
" nnoremap <leader>`r :w<cr>:VtrA 2<cr>:VtrSendCommandToRunner exit<cr>:VtrSendCommandToRunner RACK_ENV=test bundle exec lita<cr>
" nnoremap <leader>`f :w<cr>:VtrA 3<cr>:VtrSendCommandToRunner bundle exec rspec -f documentation <c-r>=expand("%")<cr><cr>
" nnoremap <leader>`l :w<cr>:VtrA 3<cr>:VtrSendCommandToRunner bundle exec rspec -f documentation <c-r>=expand("%")<cr>:<c-r>=line('.')<cr><cr>

nnoremap <leader>` :w<cr>:BrowserSyncReload<cr>
nnoremap <leader>jp :Prettier<cr>:w<cr>

let g:prettier#autoformat = 1

let g:closetag_filenames = '*.vue'

""CoC Settings
"" Use tab for trigger completion with characters ahead and navigate.
"" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
"" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
 
"" Make <CR> to accept selected completion item or notify coc.nvim to format
"" <C-g>u breaks current undo, please make your own choice.
"inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
"                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"
" Use tab for trigger completion with characters ahead and navigate
" NOTE: There's always complete item selected by default, you may want to enable
" no select by `"suggest.noselect": true` in your configuration file
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()

inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Make <CR> to accept selected completion item or notify coc.nvim to format
" <C-g>u breaks current undo, please make your own choice
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

"Ultisnips Settings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
 
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"coc-snippets Settings
" inoremap <silent><expr> <TAB>
"       \ coc#pum#visible() ? coc#_select_confirm() :
"       \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
"       \ CheckBackspace() ? "\<TAB>" :
"       \ coc#refresh()

" function! CheckBackspace() abort
"   let col = col('.') - 1
"   return !col || getline('.')[col - 1]  =~# '\s'
" endfunction

let g:coc_snippet_next = '<tab>'
let g:coc_global_extensions = ['coc-solargraph']
